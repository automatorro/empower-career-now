import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { userId, timeframe, progressData } = await req.json();
    
    const GEMINI_API_KEY = Deno.env.get('GEMINI_API_KEY');
    const SUPABASE_URL = Deno.env.get('SUPABASE_URL');
    const SUPABASE_SERVICE_ROLE_KEY = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');

    if (!GEMINI_API_KEY || !SUPABASE_URL || !SUPABASE_SERVICE_ROLE_KEY) {
      throw new Error('Missing required environment variables');
    }

    const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);

    // Generate AI analysis of progress data
    const fullPrompt = `Ești un analist în dezvoltarea carierei. Creează un raport de progres cuprinzător care analizează călătoria de dezvoltare a carierei utilizatorului.

    Analizează aceste date de progres în carieră pentru ${timeframe}:

    ${JSON.stringify(progressData, null, 2)}

    Generează un raport de progres profesional cu:
    - Rezumatul executiv al progresului
    - Realizări și jaloane cheie
    - Zone de creștere și îmbunătățire
    - Analiza tendințelor și pattern-urilor
    - Recomandări pentru dezvoltarea viitoare
    - Obiective pentru următoarea perioadă

    Formatează ca HTML care poate fi convertit în PDF cu stilizare profesională.`;

    const response = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${GEMINI_API_KEY}`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: fullPrompt
            }]
          }]
        })
      }
    );

    if (!response.ok) {
      const errorText = await response.text();
      console.error(`Gemini API error: ${response.status} - ${errorText}`);
      throw new Error(`Gemini API error: ${response.status}`);
    }

    const geminiResult = await response.json();
    const htmlContent = geminiResult.candidates?.[0]?.content?.parts?.[0]?.text;

    if (!htmlContent) {
      throw new Error('No response from Gemini API');
    }

    // Create a complete HTML document with styling
    const fullHtml = `
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <title>Career Progress Report</title>
        <style>
            body { 
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
                line-height: 1.6; 
                margin: 40px; 
                color: #333; 
            }
            h1 { color: #2c3e50; border-bottom: 3px solid #3498db; padding-bottom: 10px; }
            h2 { color: #34495e; margin-top: 30px; }
            .header { text-align: center; margin-bottom: 40px; }
            .summary { background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0; }
            .achievement { background: #e8f5e8; padding: 15px; margin: 10px 0; border-radius: 5px; }
            .recommendation { background: #fff3cd; padding: 15px; margin: 10px 0; border-radius: 5px; }
            .footer { margin-top: 40px; text-align: center; font-size: 12px; color: #666; }
        </style>
    </head>
    <body>
        <div class="header">
            <h1>Career Progress Report</h1>
            <p><strong>Period:</strong> ${timeframe}</p>
            <p><strong>Generated:</strong> ${new Date().toLocaleDateString()}</p>
        </div>
        ${htmlContent}
        <div class="footer">
            <p>Generated by EmpowerCareer - Your Career Development Platform</p>
        </div>
    </body>
    </html>`;

    console.log(`Generated progress PDF for user ${userId}, timeframe: ${timeframe}`);

    // Return the HTML content that can be converted to PDF on the client side
    return new Response(JSON.stringify({ 
      htmlContent: fullHtml,
      filename: `career-progress-${timeframe}-${new Date().toISOString().split('T')[0]}.pdf`
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  } catch (error) {
    console.error('Error in export-progress-pdf:', error);
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});